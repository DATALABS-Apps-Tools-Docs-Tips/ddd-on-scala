:toc:

= DDD sur Scala

== Présentation

Ceci est un exemple d'implémentation de https://www.amazon.co.jp/dp/4798121967 [DDD (Domain Driven Design)] par https://www.scala-lang.org [Scala].

Tirant parti des fonctionnalités du langage fonctionnel de Scala, nous visons à implémenter * immuable * sans effets secondaires (effets secondaires localisés) * DDD.

Veuillez vous référer à https://speakerdeck.com/crossroad0201/scala-on-ddd [cette diapositive] pour l'explication de cet exemple.

[REMARQUE]
====
Les points d'implémentation sont commentés dans le code avec `NOTE :`. +
Veuillez vous référer à https://github.com/crossroad0201/ddd-on-scala/search?utf8=%E2%9C%93&q=NOTE%3A&type=[recherche de texte avec REMARQUE :].
====

== Configuration

=== Prémisse

* JDK 1.8 et supérieur
* http://www.scala-sbt.org/index.html [sbt]

=== Préparation BD

Dans cet exemple, il existe un exemple de code utilisant http://www.h2database.com/html/main.html [base de données H2 intégrée].

Créez une base de données avant d'exécuter l'exemple.

Créez une table dans la BD avec * ** sbt **.
====
> $ sbt "project rdb" flywayMigrate
====

== Construire et exécuter

Cet exemple n'a pas de point de terminaison en tant qu'application. +
Vérifiez le fonctionnement en lançant un test unitaire depuis **sbt**.

====
> test $ sbt
====

== Paramétrage

=== Configuration du module de couche

Cet exemple est basé sur http://jeffreypalermo.com/blog/the-onion-architecture-part-1/ [Onion Architecture]
La composition du module de couche est adoptée.

image : doc / Layer.png [Schéma de configuration des couches]

[format = "csv", options = ["en-tête"]]
| ===
Couches, responsabilités, couches dépendantes
Domaines modèles, préoccupations et spécifications du domaine (entreprise). ,rien
Utilisez des applications et des domaines pour implémenter des cas d'utilisation. ,domaine
Query, le modèle de requête pour `CQRS`. Fournit une vue en lecture seule du domaine. ,rien
Persistez le résultat d'exécution de l'infrastructure et de l'application. , Application / Domaine / Requête
Interface, fournit une interface utilisateur à l'utilisateur. , Infrastructure / Applications / Domaines / Requêtes
| ===

* La `couche de domaine` et la `couche d'application` ne dépendent d'aucune infrastructure particulière, donc
Il facilite le changement d'infrastructure. +
Il est également facile de se moquer de votre infrastructure, ce qui rend les tests unitaires faciles et légers.

* `Couche d'infrastructure` divise le module en fonction du service middleware à adopter. +
Cela vous permet de limiter les modules d'infrastructure à ce que vous devez exécuter au niveau de la "couche d'interface".
Vous pouvez éviter de gonfler les modules d'exécution en raison de bibliothèques inutilisées (pilotes JDBC, bibliothèques clientes, etc.) +
En particulier sur les plates-formes sans serveur telles que "AWS Lambda", plus le module d'exécution est volumineux, plus le temps de démarrage au moment de l'exécution est long.
Cela vaut la peine de réduire la taille du module d'exécution.

* La `couche d'interface` divise le module par l'interface qu'il fournit (écran Web, API REST, CLI, etc.). +

=== Paramétrage des composants

La configuration des composants de cet exemple est illustrée dans la figure ci-dessous.

Si vous suivez le code du lien : modules/application/src/main/scala/crossroad0201/dddonscala/application/task/TaskService.scala [service d'application], il sera plus facile de comprendre l'ensemble.

image : doc / Components.png [Schéma des composants]

=== Modèle conceptuel

Cet exemple de domaine traite de la gestion des tâches simples. +
Le modèle conceptuel du domaine est présenté dans la figure ci-dessous.

image : doc / DomainModel.png [Diagramme du modèle conceptuel]

== Références

=== Échelle

* https://dwango.github.io/scala_text/ [Texte de formation Scala de Dwango] +
Texte d'introduction pour Scala.
* http://www.ne.jp/asahi/hishidama/home/tech/scala/index.html [Référence Scala de Hishidama] +
Une référence aux fonctionnalités de langage et aux API fréquemment utilisées de Scala.

* http://www.scalatest.org/user_guide[ScalaTest] +
Une bibliothèque de test Scala typique.
* http://calikejdbc.org [ScalikeJDBC] +
Une bibliothèque pour accéder à RDB dans Scala.

* https://tpolecat.github.io/2015/04/29/f-bounds.html [Renvoyer le type "actuel" dans Scala] +
Une description de la façon d'utiliser les sous-types comme type de retour des méthodes de supertype.

=== DDD (Conception pilotée par domaine)

* https://www.amazon.co.jp/dp/4798121967 [Livre : Conception pilotée par domaine d'Eric Evans]
* https://www.amazon.co.jp/dp/479813161X [Livre : Conception pratique pilotée par le domaine]

* http://labs.gree.jp/blog/2013/12/9354/ [DDD que j'ai trouvé dans le code Scala] +
Explication de DDD en utilisant Scala.
* http://www.qcontokyo.com/data_2016/pdf/B-2_2_JunichiKato.pdf [Pratique DDD (meilleure) pratique {relation entre les événements de domaine, les microservices et les organisations}] +
Explication des modèles CQRS et de l'événement de domaine / de l'approvisionnement en événements.

=== Architecture

* http://jeffreypalermo.com/blog/the-onion-architecture-part-1/ [L'architecture de l'oignon : partie 1]
* https://qiita.com/little_hand_s/items/2040fba15d90b93fc124 [Domain Driven + Onion Architecture Overview]
* http://qiita.com/gki/items/91386b082c57123f1ba0 [Nettoyez ce que vous n'avez pas compris dans Clean Architecture]

=== Autre

* http://powerman.name/doc/asciidoc [AsciiDoc cheatsheet] +
Comment écrire AsciiDoc (le langage Markdown utilisé dans ce README). Plus expressif que le Markdown général.
